name: CI/CD Pipeline for ejercicio calculadora ampliada - Tema 5

on:
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - name: Install dependencies
        run: composer install

      - name: Run tests
        run: ./vendor/bin/phpunit tests

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: List files in the root directory (to check folder structure)
        run: ls -al

      - name: List files in the AEV4 directory (to check if composer.json exists)
        run: |
          ls -al AEV4  # Verifica si composer.json está en la carpeta AEV4

      - name: List files in the db_mysql/AEV4 directory (to check contents)
        run: |
          ls -al db_mysql/AEV4  # Verifica qué archivos están dentro de db_mysql/AEV4

      - name: Check files to deploy
        run: |
          # Listamos todos los archivos que se están enviando al servidor para depurar el despliegue
          ls -al  # Verifica qué archivos están en la raíz del repositorio antes de la sincronización
          ls -al AEV4  # Verifica qué archivos están dentro de AEV4 antes de la sincronización
          ls -al db_mysql  # Verifica qué archivos están dentro de db_mysql

      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Use SSH to create the deploy path if it doesn't exist
          ssh -o StrictHostKeyChecking=no $USERNAME@$HOST "mkdir -p $DEPLOY_PATH"

          # Sync the application files to the server
          rsync -avz --delete --no-t --exclude 'vendor' --exclude '.git' . $USERNAME@$HOST:$DEPLOY_PATH

          # Optionally, run Composer install on the server
          ssh -o StrictHostKeyChecking=no $USERNAME@$HOST "cd $DEPLOY_PATH && composer install --no-dev --optimize-autoloader"

          # Restart Apache if needed
          ssh -o StrictHostKeyChecking=no $USERNAME@$HOST "sudo systemctl restart apache2"

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/imagenaev4:${{ github.sha }} .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/imagenaev4:${{ github.sha }}